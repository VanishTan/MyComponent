name: Auto Tag on Main Merge

on:
  push:
    branches:
      - main
    paths:
      - '*.podspec'

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需要写权限来创建 tag
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取所有历史记录以检查 tag

      - name: Extract version from podspec
        id: version
        run: |
          PODSPEC_FILE=$(ls *.podspec | head -n 1)
          VERSION=$(grep -o 's.version.*=.*"[^"]*"' "$PODSPEC_FILE" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
          
          if [ -z "$VERSION" ]; then
            echo "❌ 无法从 podspec 中提取版本号"
            exit 1
          fi
          
          TAG_NAME="v$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "📦 检测到版本: $TAG_NAME"

      - name: Check if tag exists
        id: tag_check
        run: |
          TAG_NAME="${{ steps.version.outputs.tag_name }}"
          
          if git rev-parse "refs/tags/$TAG_NAME" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "ℹ️  Tag $TAG_NAME 已存在，跳过创建"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✨ Tag $TAG_NAME 不存在，准备创建"
          fi

      - name: Validate CHANGELOG
        if: steps.tag_check.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          if [ ! -f "CHANGELOG.md" ]; then
            echo "❌ CHANGELOG.md 文件不存在"
            exit 1
          fi
          
          if ! grep -q "\[$VERSION\]" CHANGELOG.md; then
            echo "❌ CHANGELOG.md 中缺少版本 $VERSION 的记录"
            echo "请在 CHANGELOG.md 中添加版本更新说明后再合并"
            exit 1
          fi
          
          echo "✅ CHANGELOG 验证通过"

      - name: Create and push tag
        if: steps.tag_check.outputs.exists == 'false'
        run: |
          TAG_NAME="${{ steps.version.outputs.tag_name }}"
          VERSION="${{ steps.version.outputs.version }}"
          
          # 配置 git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 创建 annotated tag
          git tag -a "$TAG_NAME" -m "Release version $VERSION"
          
          # 推送 tag
          git push origin "$TAG_NAME"
          
          echo "🎉 成功创建并推送 tag: $TAG_NAME"

      - name: Create GitHub Release
        if: steps.tag_check.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          release_name: Release ${{ steps.version.outputs.tag_name }}
          body: |
            ## Release ${{ steps.version.outputs.version }}
            
            自动发布版本 ${{ steps.version.outputs.version }}
            
            查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 获取详细更新内容。
          draft: false
          prerelease: false

      - name: Summary
        if: steps.tag_check.outputs.exists == 'false'
        run: |
          echo "### 🚀 自动打 Tag 成功" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **版本号**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag 名称**: ${{ steps.version.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **提交**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "接下来 tag-check.yml 工作流将自动运行验证。" >> $GITHUB_STEP_SUMMARY
