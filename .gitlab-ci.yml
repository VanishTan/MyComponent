stages:
  - quality-check
  - test
  - tag
  - release

# 全局变量
variables:
  RUBY_VERSION: "3.2.9"
  BUNDLER_VERSION: "2.5.22"

# 复用的脚本模板
.ruby_setup: &ruby_setup
  image: ruby:$RUBY_VERSION
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - vendor/bundle
  before_script:
    - gem install bundler -v $BUNDLER_VERSION
    - bundle config set --local path 'vendor/bundle'
    - bundle install --jobs $(nproc)

# ========================================
# MR 质量检查 (对应 pr-check.yml)
# ========================================
mr-quality-check:
  <<: *ruby_setup
  stage: quality-check
  only:
    - merge_requests
  script:
    - echo "🔍 运行 Danger 进行 MR 质量检查..."
    - bundle exec danger
  allow_failure: false

# ========================================
# CI 测试 (对应 ci.yml)
# ========================================
ci-test:
  <<: *ruby_setup
  stage: test
  only:
    - main
    - develop
    - merge_requests
  script:
    - echo "🧪 开始 CI 测试..."
    - |
      PODSPEC=$(ls *.podspec | head -n 1)
      if [ -z "$PODSPEC" ]; then
        echo "❌ 未找到 .podspec 文件"
        exit 1
      fi
      echo "验证 podspec: $PODSPEC"
      bundle exec pod lib lint $PODSPEC --allow-warnings --verbose
  allow_failure: false

# ========================================
# 自动打 Tag (对应 auto-tag.yml)
# ========================================
auto-tag:
  <<: *ruby_setup
  stage: tag
  only:
    refs:
      - main
    changes:
      - "*.podspec"
  script:
    - echo "📦 检测到 podspec 变更，开始自动打 Tag..."
    
    # 1. 提取版本号
    - |
      PODSPEC_FILE=$(find . -maxdepth 1 -name "*.podspec" | head -n 1)
      if [ -z "$PODSPEC_FILE" ]; then
        echo "❌ 未找到 .podspec 文件"
        exit 1
      fi
      echo "找到 podspec 文件: $PODSPEC_FILE"
    
    - |
      VERSION=$(grep -E '(s|spec)\.version.*=.*"[^"]*"' "$PODSPEC_FILE" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
      if [ -z "$VERSION" ]; then
        echo "❌ 无法从 podspec 中提取版本号"
        cat "$PODSPEC_FILE"
        exit 1
      fi
      TAG_NAME="$VERSION"
      echo "📦 检测到版本: $TAG_NAME"
    
    # 2. 检查 Tag 是否已存在
    - |
      if git rev-parse "refs/tags/$TAG_NAME" >/dev/null 2>&1; then
        echo "ℹ️  Tag $TAG_NAME 已存在，跳过创建"
        exit 0
      else
        echo "✨ Tag $TAG_NAME 不存在，准备创建"
      fi
    
    # 3. 验证 CHANGELOG
    - |
      if [ ! -f "CHANGELOG.md" ]; then
        echo "❌ CHANGELOG.md 文件不存在"
        exit 1
      fi
      if ! grep -q "\[$VERSION\]" CHANGELOG.md; then
        echo "❌ CHANGELOG.md 中缺少版本 $VERSION 的记录"
        echo "请在 CHANGELOG.md 中添加版本更新说明后再合并"
        exit 1
      fi
      echo "✅ CHANGELOG 验证通过"
    
    # 4. 创建并推送 Tag
    - |
      git config user.name "GitLab CI"
      git config user.email "gitlab-ci@gitlab.com"
      git tag -a "$TAG_NAME" -m "Release version $VERSION"
      git push "https://oauth2:${CI_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" "$TAG_NAME"
      echo "🎉 成功创建并推送 tag: $TAG_NAME"
    
    # 5. 创建 GitLab Release
    - |
      RELEASE_DESCRIPTION="## Release $VERSION

      自动发布版本 $VERSION
      
      查看 [CHANGELOG.md](${CI_PROJECT_URL}/-/blob/main/CHANGELOG.md) 获取详细更新内容。"
      
      curl --request POST \
        --header "PRIVATE-TOKEN: ${CI_PUSH_TOKEN}" \
        --data "tag_name=$TAG_NAME" \
        --data "name=Release v$TAG_NAME" \
        --data "description=$RELEASE_DESCRIPTION" \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases"
      
      echo "🎉 成功创建 GitLab Release: $TAG_NAME"

# ========================================
# Tag 验证 (对应 tag-check.yml)
# ========================================
tag-validation:
  <<: *ruby_setup
  stage: release
  only:
    - tags
  script:
    - echo "🔍 验证 Tag: $CI_COMMIT_TAG"
    
    # 1. 验证 Tag 格式
    - |
      TAG=$CI_COMMIT_TAG
      if [[ ! $TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
        echo "❌ Tag格式错误: $TAG"
        echo "请使用格式: 1.2.3 或 1.2.3-beta.1"
        exit 1
      fi
      echo "✅ Tag格式正确"
    
    # 2. 检查 podspec 版本
    - |
      VERSION=$TAG
      PODSPEC_VERSION=$(grep -E '(s|spec)\.version.*=.*"[^"]*"' *.podspec | grep -o '[0-9.]\+')
      echo "Tag版本: $VERSION"
      echo "Podspec版本: $PODSPEC_VERSION"
      if [ "$PODSPEC_VERSION" != "$VERSION" ]; then
        echo "❌ Podspec版本($PODSPEC_VERSION)与tag版本($VERSION)不匹配"
        exit 1
      fi
      echo "✅ 版本号匹配"
    
    # 3. 检查 CHANGELOG
    - |
      if ! grep -q "\[$VERSION\]" CHANGELOG.md; then
        echo "❌ CHANGELOG.md中缺少版本$VERSION的记录"
        echo "请在CHANGELOG.md中添加: ## [$VERSION] - $(date +%Y-%m-%d)"
        exit 1
      fi
      echo "✅ CHANGELOG已更新"
    
    # 4. 运行 Fastlane 发布前检查
    - gem install fastlane
    - fastlane pre_release_check version:$CI_COMMIT_TAG || true
    
    - echo "🎉 版本 $CI_COMMIT_TAG 验证通过，可以安全发布！"
